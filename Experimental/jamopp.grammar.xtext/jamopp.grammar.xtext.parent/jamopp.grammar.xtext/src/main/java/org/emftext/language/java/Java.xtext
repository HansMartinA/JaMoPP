// automatically generated by Xtext
grammar org.emftext.language.java.Java with org.eclipse.xtext.common.Terminals

import "http://www.emftext.org/java/modules" as modules
import "http://www.emftext.org/commons/layout" as layout
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emftext.org/java/imports" as imports
import "http://www.emftext.org/java/types" as types
import "http://www.emftext.org/java/references" as references
import "http://www.emftext.org/java/modifiers" as modifiers
import "http://www.emftext.org/java/containers" 
import "http://www.emftext.org/java/classifiers" as classifiers
import "http://www.emftext.org/java/commons" as commons

LayoutInformation returns layout::LayoutInformation:
	ReferenceLayoutInformation | AttributeLayoutInformation | KeywordLayoutInformation;

Reference returns references::Reference:
	IdentifierReference;


Classifier returns classifiers::Classifier:
	Class | Interface;

ConcreteClassifier returns classifiers::ConcreteClassifier:
	Class | Interface;


ReferenceableElement returns references::ReferenceableElement:
	Classifier;

TypeReference returns types::TypeReference:
	ClassifierReference | NamespaceClassifierReference;




Modifier returns modifiers::Modifier:
	Static;








EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;

ReferenceLayoutInformation returns layout::ReferenceLayoutInformation:
	'ReferenceLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
		'object' object=[ecore::EObject|EString]
	'}';

AttributeLayoutInformation returns layout::AttributeLayoutInformation:
	'AttributeLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
	'}';

KeywordLayoutInformation returns layout::KeywordLayoutInformation:
	'KeywordLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

ClassifierImport returns imports::ClassifierImport:
	'ClassifierImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'classifier' classifier=[classifiers::ConcreteClassifier|EString]
	'}';

PackageImport returns imports::PackageImport:
	{imports::PackageImport}
	'PackageImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
	'}';

StaticClassifierImport returns imports::StaticClassifierImport:
	'StaticClassifierImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'static' static=Static
	'}';

StaticMemberImport returns imports::StaticMemberImport:
	'StaticMemberImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'staticMembers' '(' staticMembers+=[references::ReferenceableElement|EString] ( "," staticMembers+=[references::ReferenceableElement|EString])* ')' 
		'static' static=Static
	'}';

Static returns modifiers::Static:
	{modifiers::Static}
	'Static'
	'{'
	'}';

Class returns classifiers::Class:
	{classifiers::Class}
	'Class'
	name=EString
	'{'
		('implements' '{' implements+=TypeReference ( "," implements+=TypeReference)* '}' )?
		('extends' extends=TypeReference)?
		('defaultExtends' defaultExtends=TypeReference)?
	'}';

Interface returns classifiers::Interface:
	{classifiers::Interface}
	'Interface'
	name=EString
	'{'
		('extends' '{' extends+=TypeReference ( "," extends+=TypeReference)* '}' )?
		('defaultExtends' '{' defaultExtends+=TypeReference ( "," defaultExtends+=TypeReference)* '}' )?
	'}';

ClassifierReference returns types::ClassifierReference:
	'ClassifierReference'
	'{'
		'target' target=[classifiers::Classifier|EString]
	'}';

NamespaceClassifierReference returns types::NamespaceClassifierReference:
	'NamespaceClassifierReference'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'classifierReferences' '{' classifierReferences+=ClassifierReference ( "," classifierReferences+=ClassifierReference)* '}' 
	'}';

IdentifierReference returns references::IdentifierReference:
	'IdentifierReference'
	'{'
		'target' target=[references::ReferenceableElement|EString]
		('next' next=Reference)?
	'}';

UsesModuleDirective returns modules::UsesModuleDirective:
	'UsesModuleDirective'
	'{'
		'typeReference' typeReference=TypeReference
	'}';

ProvidesModuleDirective returns modules::ProvidesModuleDirective:
	'ProvidesModuleDirective'
	'{'
		'typeReference' typeReference=TypeReference
		'serviceProviders' '{' serviceProviders+=TypeReference ( "," serviceProviders+=TypeReference)* '}' 
	'}';

RequiresModuleDirective returns modules::RequiresModuleDirective:
	'RequiresModuleDirective'
	'{'
		('modifiers' '{' modifiers+=Modifier ( "," modifiers+=Modifier)* '}' )?
		'requiredModule' requiredModule=ModuleReference
	'}';

OpensModuleDirective returns modules::OpensModuleDirective:
	'OpensModuleDirective'
	'{'
		'accessGrantedPackage' accessGrantedPackage=IdentifierReference
		('modules' '{' modules+=ModuleReference ( "," modules+=ModuleReference)* '}' )?
	'}';

ExportsModuleDirective returns modules::ExportsModuleDirective:
	'ExportsModuleDirective'
	'{'
		'accessGrantedPackage' accessGrantedPackage=IdentifierReference
		('modules' '{' modules+=ModuleReference ( "," modules+=ModuleReference)* '}' )?
	'}';

ModuleReference returns modules::ModuleReference:
	{modules::ModuleReference}
	'ModuleReference'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		// ('target' target=Module)?
	'}';
