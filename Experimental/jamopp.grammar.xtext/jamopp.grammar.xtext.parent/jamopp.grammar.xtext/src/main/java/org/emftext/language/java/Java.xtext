// automatically generated by Xtext
grammar org.emftext.language.java.Java with org.eclipse.xtext.common.Terminals

import "http://www.emftext.org/java/modules" as modules
import "http://www.emftext.org/commons/layout" as layout
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.emftext.org/java/imports" as imports
import "http://www.emftext.org/java/annotations" as annotations
import "http://www.emftext.org/java/types" as types
import "http://www.emftext.org/java/references" as references
import "http://www.emftext.org/java/modifiers" as modifiers
import "http://www.emftext.org/java/containers" 
import "http://www.emftext.org/java/generics" as generics
import "http://www.emftext.org/java/arrays" as arrays
import "http://www.emftext.org/java/classifiers" as classifiers
import "http://www.emftext.org/java/members" as members
import "http://www.emftext.org/java/parameters" as parameters
import "http://www.emftext.org/java/statements" as statements
import "http://www.emftext.org/java/expressions" as expressions
import "http://www.emftext.org/java/variables" as variables
import "http://www.emftext.org/java/literals" as literals
import "http://www.emftext.org/java/operators" as operators
import "http://www.emftext.org/java/commons" as commons
import "http://www.emftext.org/java/instantiations" as instantiations


LayoutInformation returns layout::LayoutInformation:
	ReferenceLayoutInformation | AttributeLayoutInformation | KeywordLayoutInformation;

TypeArgument returns generics::TypeArgument:
	ExtendsTypeArgument | QualifiedTypeArgument | SuperTypeArgument | UnknownTypeArgument_Impl;

Reference returns references::Reference:
	IdentifierReference | MethodCall | ReflectiveClassReference | PrimitiveTypeReference | StringReference | SelfReference;


Classifier returns classifiers::Classifier:
	Class | Interface | Enumeration | Annotation;

AnnotationParameter returns annotations::AnnotationParameter:
	SingleAnnotationParameter | AnnotationParameterList;


ConcreteClassifier returns classifiers::ConcreteClassifier:
	Class | Interface | Enumeration | Annotation;


ReferenceableElement returns references::ReferenceableElement:
	PackageReference;

TypeReference returns types::TypeReference:
	ClassifierReference | NamespaceClassifierReference | Boolean | Byte | Char | Double | Float | Int0 | Long | Short | Void;


Member returns members::Member:
	Constructor | EmptyMember | Field | InterfaceMethod | ClassMethod;

AnnotationInstanceOrModifier returns modifiers::AnnotationInstanceOrModifier:
	Abstract | Final | Native | Protected | Public | Private | Static | Strictfp | Synchronized | Transient | Volatile | Default | Transitive;





UnknownTypeArgument returns generics::UnknownTypeArgument:
	UnknownTypeArgument_Impl | ExtendsTypeArgument | SuperTypeArgument;

Parameter returns parameters::Parameter:
	OrdinaryParameter_Impl | VariableLengthParameter | CatchParameter | ReceiverParameter;



Expression returns expressions::Expression:
	AssignmentExpression | ConditionalExpression | ConditionalOrExpression | ConditionalAndExpression | InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression | LambdaExpression;


Statement returns statements::Statement:
	Assert | Break | Block | Condition | Continue | DoWhileLoop | EmptyStatement | ExpressionStatement | ForLoop | ForEachLoop | JumpLabel | LocalVariableStatement | Return | Switch | SynchronizedBlock | Throw | TryBlock | WhileLoop_Impl;

Modifier returns modifiers::Modifier:
	Abstract | Final | Native | Protected | Public | Private | Static | Strictfp | Synchronized | Transient | Volatile | Default | Transitive;




OrdinaryParameter returns parameters::OrdinaryParameter:
	OrdinaryParameter_Impl | CatchParameter;


SwitchCase returns statements::SwitchCase:
	DefaultSwitchCase | NormalSwitchCase;

Resource returns variables::Resource:
	LocalVariable;


AssignmentExpressionChild returns expressions::AssignmentExpressionChild:
	ConditionalExpression | ConditionalOrExpression | ConditionalAndExpression | InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

AssignmentOperator returns operators::AssignmentOperator:
	Assignment | AssignmentAnd | AssignmentDivision | AssignmentExclusiveOr | AssignmentMinus | AssignmentModulo | AssignmentMultiplication | AssignmentLeftShift | AssignmentOr | AssignmentPlus | AssignmentRightShift | AssignmentUnsignedRightShift;

ConditionalExpressionChild returns expressions::ConditionalExpressionChild:
	ConditionalOrExpression | ConditionalAndExpression | InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

ConditionalOrExpressionChild returns expressions::ConditionalOrExpressionChild:
	ConditionalAndExpression | InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

ConditionalAndExpressionChild returns expressions::ConditionalAndExpressionChild:
	InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

InclusiveOrExpressionChild returns expressions::InclusiveOrExpressionChild:
	ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

ExclusiveOrExpressionChild returns expressions::ExclusiveOrExpressionChild:
	AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

AndExpressionChild returns expressions::AndExpressionChild:
	EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

EqualityOperator returns operators::EqualityOperator:
	Equal | NotEqual;

EqualityExpressionChild returns expressions::EqualityExpressionChild:
	InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

InstanceOfExpressionChild returns expressions::InstanceOfExpressionChild:
	RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

RelationExpressionChild returns expressions::RelationExpressionChild:
	ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

RelationOperator returns operators::RelationOperator:
	GreaterThan | GreaterThanOrEqual | LessThan | LessThanOrEqual;

ShiftExpressionChild returns expressions::ShiftExpressionChild:
	AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

ShiftOperator returns operators::ShiftOperator:
	LeftShift | RightShift | UnsignedRightShift;

AdditiveExpressionChild returns expressions::AdditiveExpressionChild:
	MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

AdditiveOperator returns operators::AdditiveOperator:
	Addition | Subtraction;

MultiplicativeExpressionChild returns expressions::MultiplicativeExpressionChild:
	UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

MultiplicativeOperator returns operators::MultiplicativeOperator:
	Division | Multiplication | Remainder;

UnaryOperator returns operators::UnaryOperator:
	Addition | Subtraction | Complement | Negate;

UnaryExpressionChild returns expressions::UnaryExpressionChild:
	PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

UnaryModificationExpressionChild returns expressions::UnaryModificationExpressionChild:
	CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression;

UnaryModificationOperator returns operators::UnaryModificationOperator:
	MinusMinus | PlusPlus;

MethodReferenceExpressionChild returns expressions::MethodReferenceExpressionChild:
	NestedExpression;

LambdaParameters returns expressions::LambdaParameters:
	ExplicitlyTypedLambdaParameters | ImplicitlyTypedLambdaParameters_Impl | SingleImplicitLambdaParameter;

LambdaBody returns expressions::LambdaBody:
	AssignmentExpression | ConditionalExpression | ConditionalOrExpression | ConditionalAndExpression | InclusiveOrExpression | ExclusiveOrExpression | AndExpression | EqualityExpression | InstanceOfExpression | RelationExpression | ShiftExpression | AdditiveExpression | MultiplicativeExpression | UnaryExpression | PrefixUnaryModificationExpression | SuffixUnaryModificationExpression | CastExpression | NestedExpression | PrimaryExpressionReferenceExpression | ClassTypeConstructorReferenceExpression | ArrayConstructorReferenceExpression | LambdaExpression;

PrimitiveType returns types::PrimitiveType:
	Boolean | Byte | Char | Double | Float | Int0 | Long | Short | Void;

Self returns literals::Self:
	Super | This;




AnnotationValue returns annotations::AnnotationValue:
	AnnotationInstance;





EString returns ecore::EString:
	STRING | ID;

AnnotationInstance returns annotations::AnnotationInstance:
	'AnnotationInstance'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'annotation' annotation=[classifiers::Classifier|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		('parameter' parameter=AnnotationParameter)?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

ReferenceLayoutInformation returns layout::ReferenceLayoutInformation:
	'ReferenceLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
		'object' object=[ecore::EObject|EString]
	'}';

AttributeLayoutInformation returns layout::AttributeLayoutInformation:
	'AttributeLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
	'}';

KeywordLayoutInformation returns layout::KeywordLayoutInformation:
	'KeywordLayoutInformation'
	'{'
		'startOffset' startOffset=EInt
		'hiddenTokenText' hiddenTokenText=EString
		'visibleTokenText' visibleTokenText=EString
		'syntaxElementID' syntaxElementID=EString
	'}';

EObject returns ecore::EObject:
	{ecore::EObject}
	'EObject'
	;

ClassifierImport returns imports::ClassifierImport:
	'ClassifierImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'classifier' classifier=[classifiers::ConcreteClassifier|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

PackageImport returns imports::PackageImport:
	{imports::PackageImport}
	'PackageImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

StaticClassifierImport returns imports::StaticClassifierImport:
	'StaticClassifierImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'static' static=Static
	'}';

StaticMemberImport returns imports::StaticMemberImport:
	'StaticMemberImport'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		'staticMembers' '(' staticMembers+=[references::ReferenceableElement|EString] ( "," staticMembers+=[references::ReferenceableElement|EString])* ')' 
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'static' static=Static
	'}';

Static returns modifiers::Static:
	{modifiers::Static}
	'Static'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

TypeParameter returns generics::TypeParameter:
	{generics::TypeParameter}
	'TypeParameter'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('extendTypes' '{' extendTypes+=TypeReference ( "," extendTypes+=TypeReference)* '}' )?
	'}';

Class returns classifiers::Class:
	{classifiers::Class}
	'Class'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('members' '{' members+=Member ( "," members+=Member)* '}' )?
		('defaultMembers' '{' defaultMembers+=Member ( "," defaultMembers+=Member)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('implements' '{' implements+=TypeReference ( "," implements+=TypeReference)* '}' )?
		('extends' extends=TypeReference)?
		('defaultExtends' defaultExtends=TypeReference)?
	'}';

Interface returns classifiers::Interface:
	{classifiers::Interface}
	'Interface'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('members' '{' members+=Member ( "," members+=Member)* '}' )?
		('defaultMembers' '{' defaultMembers+=Member ( "," defaultMembers+=Member)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('extends' '{' extends+=TypeReference ( "," extends+=TypeReference)* '}' )?
		('defaultExtends' '{' defaultExtends+=TypeReference ( "," defaultExtends+=TypeReference)* '}' )?
	'}';

Enumeration returns classifiers::Enumeration:
	{classifiers::Enumeration}
	'Enumeration'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('members' '{' members+=Member ( "," members+=Member)* '}' )?
		('defaultMembers' '{' defaultMembers+=Member ( "," defaultMembers+=Member)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('implements' '{' implements+=TypeReference ( "," implements+=TypeReference)* '}' )?
		('constants' '{' constants+=EnumConstant ( "," constants+=EnumConstant)* '}' )?
	'}';

Annotation returns classifiers::Annotation:
	{classifiers::Annotation}
	'Annotation'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('members' '{' members+=Member ( "," members+=Member)* '}' )?
		('defaultMembers' '{' defaultMembers+=Member ( "," defaultMembers+=Member)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
	'}';

ClassifierReference returns types::ClassifierReference:
	'ClassifierReference'
	'{'
		'target' target=[classifiers::Classifier|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

NamespaceClassifierReference returns types::NamespaceClassifierReference:
	'NamespaceClassifierReference'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'classifierReferences' '{' classifierReferences+=ClassifierReference ( "," classifierReferences+=ClassifierReference)* '}' 
	'}';

Boolean returns types::Boolean:
	{types::Boolean}
	'Boolean'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Byte returns types::Byte:
	{types::Byte}
	'Byte'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Char returns types::Char:
	{types::Char}
	'Char'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Double returns types::Double:
	{types::Double}
	'Double'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Float returns types::Float:
	{types::Float}
	'Float'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Int0 returns types::Int:
	{types::Int}
	'Int'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Long returns types::Long:
	{types::Long}
	'Long'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Short returns types::Short:
	{types::Short}
	'Short'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

Void returns types::Void:
	{types::Void}
	'Void'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

ArrayDimension returns arrays::ArrayDimension:
	{arrays::ArrayDimension}
	'ArrayDimension'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

ExtendsTypeArgument returns generics::ExtendsTypeArgument:
	'ExtendsTypeArgument'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('extension' extension=UnknownTypeArgument)?
		'extendType' extendType=TypeReference
	'}';

QualifiedTypeArgument returns generics::QualifiedTypeArgument:
	'QualifiedTypeArgument'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		'typeReference' typeReference=TypeReference
	'}';

SuperTypeArgument returns generics::SuperTypeArgument:
	'SuperTypeArgument'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('extension' extension=UnknownTypeArgument)?
		'superType' superType=TypeReference
	'}';

UnknownTypeArgument_Impl returns generics::UnknownTypeArgument:
	{generics::UnknownTypeArgument}
	'UnknownTypeArgument'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('extension' extension=UnknownTypeArgument)?
	'}';

Constructor returns members::Constructor:
	'Constructor'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('exceptions' '{' exceptions+=NamespaceClassifierReference ( "," exceptions+=NamespaceClassifierReference)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		'block' block=Block
	'}';

EmptyMember returns members::EmptyMember:
	{members::EmptyMember}
	'EmptyMember'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Field returns members::Field:
	'Field'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('initialValue' initialValue=Expression)?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('additionalFields' '{' additionalFields+=AdditionalField ( "," additionalFields+=AdditionalField)* '}' )?
	'}';

InterfaceMethod returns members::InterfaceMethod:
	'InterfaceMethod'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('exceptions' '{' exceptions+=NamespaceClassifierReference ( "," exceptions+=NamespaceClassifierReference)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		'statement' statement=Statement
		('defaultValue' defaultValue=Expression)?
	'}';

ClassMethod returns members::ClassMethod:
	'ClassMethod'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
		('exceptions' '{' exceptions+=NamespaceClassifierReference ( "," exceptions+=NamespaceClassifierReference)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		'statement' statement=Statement
	'}';

Block returns statements::Block:
	{statements::Block}
	'Block'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('modifiers' '{' modifiers+=Modifier ( "," modifiers+=Modifier)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

OrdinaryParameter_Impl returns parameters::OrdinaryParameter:
	'OrdinaryParameter'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
	'}';

VariableLengthParameter returns parameters::VariableLengthParameter:
	'VariableLengthParameter'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

CatchParameter returns parameters::CatchParameter:
	'CatchParameter'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('typeReferences' '{' typeReferences+=TypeReference ( "," typeReferences+=TypeReference)* '}' )?
	'}';

ReceiverParameter returns parameters::ReceiverParameter:
	'ReceiverParameter'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('outerTypeReference' outerTypeReference=TypeReference)?
		'thisReference' thisReference=This
	'}';

This returns literals::This:
	{literals::This}
	'This'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Abstract returns modifiers::Abstract:
	{modifiers::Abstract}
	'Abstract'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Final returns modifiers::Final:
	{modifiers::Final}
	'Final'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Native returns modifiers::Native:
	{modifiers::Native}
	'Native'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Protected returns modifiers::Protected:
	{modifiers::Protected}
	'Protected'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Public returns modifiers::Public:
	{modifiers::Public}
	'Public'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Private returns modifiers::Private:
	{modifiers::Private}
	'Private'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Strictfp returns modifiers::Strictfp:
	{modifiers::Strictfp}
	'Strictfp'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Synchronized returns modifiers::Synchronized:
	{modifiers::Synchronized}
	'Synchronized'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Transient returns modifiers::Transient:
	{modifiers::Transient}
	'Transient'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Volatile returns modifiers::Volatile:
	{modifiers::Volatile}
	'Volatile'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Default returns modifiers::Default:
	{modifiers::Default}
	'Default'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Transitive returns modifiers::Transitive:
	{modifiers::Transitive}
	'Transitive'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Assert returns statements::Assert:
	{statements::Assert}
	'Assert'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('condition' condition=Expression)?
		('errorMessage' errorMessage=Expression)?
	'}';

Break returns statements::Break:
	{statements::Break}
	'Break'
	'{'
		('target' target=[statements::JumpLabel|EString])?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Condition returns statements::Condition:
	'Condition'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
		('condition' condition=Expression)?
		('elseStatement' elseStatement=Statement)?
	'}';

Continue returns statements::Continue:
	{statements::Continue}
	'Continue'
	'{'
		('target' target=[statements::JumpLabel|EString])?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

DoWhileLoop returns statements::DoWhileLoop:
	'DoWhileLoop'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
		'condition' condition=Expression
	'}';

EmptyStatement returns statements::EmptyStatement:
	{statements::EmptyStatement}
	'EmptyStatement'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

ExpressionStatement returns statements::ExpressionStatement:
	'ExpressionStatement'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'expression' expression=Expression
	'}';

ForLoop returns statements::ForLoop:
	'ForLoop'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
		('condition' condition=Expression)?
		('init' init=ForLoopInitializer)?
		('updates' '{' updates+=Expression ( "," updates+=Expression)* '}' )?
	'}';

ForEachLoop returns statements::ForEachLoop:
	'ForEachLoop'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
		'next' next=OrdinaryParameter
		'collection' collection=Expression
	'}';

JumpLabel returns statements::JumpLabel:
	'JumpLabel'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
	'}';

LocalVariableStatement returns statements::LocalVariableStatement:
	'LocalVariableStatement'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'variable' variable=LocalVariable
	'}';

Return returns statements::Return:
	{statements::Return}
	'Return'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('returnValue' returnValue=Expression)?
	'}';

Switch returns statements::Switch:
	'Switch'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('cases' '{' cases+=SwitchCase ( "," cases+=SwitchCase)* '}' )?
		'variable' variable=Expression
	'}';

SynchronizedBlock returns statements::SynchronizedBlock:
	'SynchronizedBlock'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'block' block=Block
		'lockProvider' lockProvider=Expression
	'}';

Throw returns statements::Throw:
	'Throw'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'throwable' throwable=Expression
	'}';

TryBlock returns statements::TryBlock:
	'TryBlock'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'block' block=Block
		('resources' '{' resources+=Resource ( "," resources+=Resource)* '}' )?
		('catchBlocks' '{' catchBlocks+=CatchBlock ( "," catchBlocks+=CatchBlock)* '}' )?
		('finallyBlock' finallyBlock=Block)?
	'}';

WhileLoop_Impl returns statements::WhileLoop:
	'WhileLoop'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'statement' statement=Statement
		'condition' condition=Expression
	'}';

AssignmentExpression returns expressions::AssignmentExpression:
	'AssignmentExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'child' child=AssignmentExpressionChild
		('assignmentOperator' assignmentOperator=AssignmentOperator)?
		('value' value=Expression)?
	'}';

ConditionalExpression returns expressions::ConditionalExpression:
	'ConditionalExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'child' child=ConditionalExpressionChild
		('expressionIf' expressionIf=Expression)?
		('generalExpressionElse' generalExpressionElse=Expression)?
	'}';

ConditionalOrExpression returns expressions::ConditionalOrExpression:
	'ConditionalOrExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=ConditionalOrExpressionChild ( "," children+=ConditionalOrExpressionChild)* '}' 
	'}';

ConditionalAndExpression returns expressions::ConditionalAndExpression:
	'ConditionalAndExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=ConditionalAndExpressionChild ( "," children+=ConditionalAndExpressionChild)* '}' 
	'}';

InclusiveOrExpression returns expressions::InclusiveOrExpression:
	'InclusiveOrExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=InclusiveOrExpressionChild ( "," children+=InclusiveOrExpressionChild)* '}' 
	'}';

ExclusiveOrExpression returns expressions::ExclusiveOrExpression:
	'ExclusiveOrExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=ExclusiveOrExpressionChild ( "," children+=ExclusiveOrExpressionChild)* '}' 
	'}';

AndExpression returns expressions::AndExpression:
	'AndExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=AndExpressionChild ( "," children+=AndExpressionChild)* '}' 
	'}';

EqualityExpression returns expressions::EqualityExpression:
	'EqualityExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'equalityOperators' '{' equalityOperators+=EqualityOperator ( "," equalityOperators+=EqualityOperator)* '}' 
		'children' '{' children+=EqualityExpressionChild ( "," children+=EqualityExpressionChild)* '}' 
	'}';

InstanceOfExpression returns expressions::InstanceOfExpression:
	'InstanceOfExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		'typeReference' typeReference=TypeReference
		'child' child=InstanceOfExpressionChild
	'}';

RelationExpression returns expressions::RelationExpression:
	'RelationExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=RelationExpressionChild ( "," children+=RelationExpressionChild)* '}' 
		'relationOperators' '{' relationOperators+=RelationOperator ( "," relationOperators+=RelationOperator)* '}' 
	'}';

ShiftExpression returns expressions::ShiftExpression:
	'ShiftExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=ShiftExpressionChild ( "," children+=ShiftExpressionChild)* '}' 
		'shiftOperators' '{' shiftOperators+=ShiftOperator ( "," shiftOperators+=ShiftOperator)* '}' 
	'}';

AdditiveExpression returns expressions::AdditiveExpression:
	'AdditiveExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=AdditiveExpressionChild ( "," children+=AdditiveExpressionChild)* '}' 
		'additiveOperators' '{' additiveOperators+=AdditiveOperator ( "," additiveOperators+=AdditiveOperator)* '}' 
	'}';

MultiplicativeExpression returns expressions::MultiplicativeExpression:
	'MultiplicativeExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'children' '{' children+=MultiplicativeExpressionChild ( "," children+=MultiplicativeExpressionChild)* '}' 
		'multiplicativeOperators' '{' multiplicativeOperators+=MultiplicativeOperator ( "," multiplicativeOperators+=MultiplicativeOperator)* '}' 
	'}';

UnaryExpression returns expressions::UnaryExpression:
	'UnaryExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'operators' '{' operators+=UnaryOperator ( "," operators+=UnaryOperator)* '}' 
		'child' child=UnaryExpressionChild
	'}';

PrefixUnaryModificationExpression returns expressions::PrefixUnaryModificationExpression:
	'PrefixUnaryModificationExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'child' child=UnaryModificationExpressionChild
		'operator' operator=UnaryModificationOperator
	'}';

SuffixUnaryModificationExpression returns expressions::SuffixUnaryModificationExpression:
	'SuffixUnaryModificationExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'child' child=UnaryModificationExpressionChild
		'operator' operator=UnaryModificationOperator
	'}';

CastExpression returns expressions::CastExpression:
	'CastExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('additionalBounds' '{' additionalBounds+=TypeReference ( "," additionalBounds+=TypeReference)* '}' )?
		'generalChild' generalChild=Expression
	'}';

NestedExpression returns expressions::NestedExpression:
	'NestedExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		'expression' expression=Expression
	'}';

PrimaryExpressionReferenceExpression returns expressions::PrimaryExpressionReferenceExpression:
	'PrimaryExpressionReferenceExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('callTypeArguments' '{' callTypeArguments+=TypeArgument ( "," callTypeArguments+=TypeArgument)* '}' )?
		'child' child=MethodReferenceExpressionChild
		('methodReference' methodReference=Reference)?
	'}';

ClassTypeConstructorReferenceExpression returns expressions::ClassTypeConstructorReferenceExpression:
	'ClassTypeConstructorReferenceExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('callTypeArguments' '{' callTypeArguments+=TypeArgument ( "," callTypeArguments+=TypeArgument)* '}' )?
	'}';

ArrayConstructorReferenceExpression returns expressions::ArrayConstructorReferenceExpression:
	'ArrayConstructorReferenceExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		'typeReference' typeReference=TypeReference
	'}';

LambdaExpression returns expressions::LambdaExpression:
	'LambdaExpression'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'parameters' parameters=LambdaParameters
		'body' body=LambdaBody
	'}';

Assignment returns operators::Assignment:
	{operators::Assignment}
	'Assignment'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentAnd returns operators::AssignmentAnd:
	{operators::AssignmentAnd}
	'AssignmentAnd'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentDivision returns operators::AssignmentDivision:
	{operators::AssignmentDivision}
	'AssignmentDivision'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentExclusiveOr returns operators::AssignmentExclusiveOr:
	{operators::AssignmentExclusiveOr}
	'AssignmentExclusiveOr'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentMinus returns operators::AssignmentMinus:
	{operators::AssignmentMinus}
	'AssignmentMinus'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentModulo returns operators::AssignmentModulo:
	{operators::AssignmentModulo}
	'AssignmentModulo'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentMultiplication returns operators::AssignmentMultiplication:
	{operators::AssignmentMultiplication}
	'AssignmentMultiplication'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentLeftShift returns operators::AssignmentLeftShift:
	{operators::AssignmentLeftShift}
	'AssignmentLeftShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentOr returns operators::AssignmentOr:
	{operators::AssignmentOr}
	'AssignmentOr'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentPlus returns operators::AssignmentPlus:
	{operators::AssignmentPlus}
	'AssignmentPlus'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentRightShift returns operators::AssignmentRightShift:
	{operators::AssignmentRightShift}
	'AssignmentRightShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

AssignmentUnsignedRightShift returns operators::AssignmentUnsignedRightShift:
	{operators::AssignmentUnsignedRightShift}
	'AssignmentUnsignedRightShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Equal returns operators::Equal:
	{operators::Equal}
	'Equal'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

NotEqual returns operators::NotEqual:
	{operators::NotEqual}
	'NotEqual'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

GreaterThan returns operators::GreaterThan:
	{operators::GreaterThan}
	'GreaterThan'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

GreaterThanOrEqual returns operators::GreaterThanOrEqual:
	{operators::GreaterThanOrEqual}
	'GreaterThanOrEqual'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

LessThan returns operators::LessThan:
	{operators::LessThan}
	'LessThan'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

LessThanOrEqual returns operators::LessThanOrEqual:
	{operators::LessThanOrEqual}
	'LessThanOrEqual'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

LeftShift returns operators::LeftShift:
	{operators::LeftShift}
	'LeftShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

RightShift returns operators::RightShift:
	{operators::RightShift}
	'RightShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

UnsignedRightShift returns operators::UnsignedRightShift:
	{operators::UnsignedRightShift}
	'UnsignedRightShift'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Addition returns operators::Addition:
	{operators::Addition}
	'Addition'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Subtraction returns operators::Subtraction:
	{operators::Subtraction}
	'Subtraction'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Division returns operators::Division:
	{operators::Division}
	'Division'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Multiplication returns operators::Multiplication:
	{operators::Multiplication}
	'Multiplication'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Remainder returns operators::Remainder:
	{operators::Remainder}
	'Remainder'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Complement returns operators::Complement:
	{operators::Complement}
	'Complement'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

Negate returns operators::Negate:
	{operators::Negate}
	'Negate'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

MinusMinus returns operators::MinusMinus:
	{operators::MinusMinus}
	'MinusMinus'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

PlusPlus returns operators::PlusPlus:
	{operators::PlusPlus}
	'PlusPlus'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

ArraySelector returns arrays::ArraySelector:
	{arrays::ArraySelector}
	'ArraySelector'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('position' position=Expression)?
	'}';

IdentifierReference returns references::IdentifierReference:
	'IdentifierReference'
	'{'
		'target' target=[references::ReferenceableElement|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
	'}';

MethodCall returns references::MethodCall:
	'MethodCall'
	'{'
		'target' target=[references::ReferenceableElement|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		('arguments' '{' arguments+=Expression ( "," arguments+=Expression)* '}' )?
		('callTypeArguments' '{' callTypeArguments+=TypeArgument ( "," callTypeArguments+=TypeArgument)* '}' )?
	'}';

ReflectiveClassReference returns references::ReflectiveClassReference:
	{references::ReflectiveClassReference}
	'ReflectiveClassReference'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
	'}';

PrimitiveTypeReference returns references::PrimitiveTypeReference:
	'PrimitiveTypeReference'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		'primitiveType' primitiveType=PrimitiveType
	'}';

StringReference returns references::StringReference:
	'StringReference'
	'{'
		'value' value=EString
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
	'}';

SelfReference returns references::SelfReference:
	'SelfReference'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('next' next=Reference)?
		('arraySelectors' '{' arraySelectors+=ArraySelector ( "," arraySelectors+=ArraySelector)* '}' )?
		'self' self=Self
	'}';

PackageReference returns references::PackageReference:
	{references::PackageReference}
	'PackageReference'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('subpackages' '{' subpackages+=PackageReference ( "," subpackages+=PackageReference)* '}' )?
	'}';

Super returns literals::Super:
	{literals::Super}
	'Super'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

ExplicitlyTypedLambdaParameters returns expressions::ExplicitlyTypedLambdaParameters:
	{expressions::ExplicitlyTypedLambdaParameters}
	'ExplicitlyTypedLambdaParameters'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

ImplicitlyTypedLambdaParameters_Impl returns expressions::ImplicitlyTypedLambdaParameters:
	{expressions::ImplicitlyTypedLambdaParameters}
	'ImplicitlyTypedLambdaParameters'
	'{'
		('identifiers' '{' identifiers+=EString ( "," identifiers+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

SingleImplicitLambdaParameter returns expressions::SingleImplicitLambdaParameter:
	{expressions::SingleImplicitLambdaParameter}
	'SingleImplicitLambdaParameter'
	'{'
		('identifiers' '{' identifiers+=EString ( "," identifiers+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
	'}';

LocalVariable returns variables::LocalVariable:
	'LocalVariable'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('typeArguments' '{' typeArguments+=TypeArgument ( "," typeArguments+=TypeArgument)* '}' )?
		('initialValue' initialValue=Expression)?
		('annotationsAndModifiers' '{' annotationsAndModifiers+=AnnotationInstanceOrModifier ( "," annotationsAndModifiers+=AnnotationInstanceOrModifier)* '}' )?
		('additionalLocalVariables' '{' additionalLocalVariables+=AdditionalLocalVariable ( "," additionalLocalVariables+=AdditionalLocalVariable)* '}' )?
	'}';

AdditionalLocalVariable returns variables::AdditionalLocalVariable:
	{variables::AdditionalLocalVariable}
	'AdditionalLocalVariable'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('initialValue' initialValue=Expression)?
	'}';

DefaultSwitchCase returns statements::DefaultSwitchCase:
	{statements::DefaultSwitchCase}
	'DefaultSwitchCase'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
	'}';

NormalSwitchCase returns statements::NormalSwitchCase:
	{statements::NormalSwitchCase}
	'NormalSwitchCase'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('statements' '{' statements+=Statement ( "," statements+=Statement)* '}' )?
		('condition' condition=Expression)?
	'}';

CatchBlock returns statements::CatchBlock:
	'CatchBlock'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'block' block=Block
		'parameter' parameter=OrdinaryParameter
	'}';

AdditionalField returns members::AdditionalField:
	{members::AdditionalField}
	'AdditionalField'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arrayDimensionsBefore' '{' arrayDimensionsBefore+=ArrayDimension ( "," arrayDimensionsBefore+=ArrayDimension)* '}' )?
		('arrayDimensionsAfter' '{' arrayDimensionsAfter+=ArrayDimension ( "," arrayDimensionsAfter+=ArrayDimension)* '}' )?
		('initialValue' initialValue=Expression)?
	'}';

EnumConstant returns members::EnumConstant:
	{members::EnumConstant}
	'EnumConstant'
	name=EString
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('arguments' '{' arguments+=Expression ( "," arguments+=Expression)* '}' )?
		('annotations' '{' annotations+=AnnotationInstance ( "," annotations+=AnnotationInstance)* '}' )?
		('anonymousClass' anonymousClass=AnonymousClass)?
	'}';

AnonymousClass returns classifiers::AnonymousClass:
	{classifiers::AnonymousClass}
	'AnonymousClass'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('members' '{' members+=Member ( "," members+=Member)* '}' )?
		('defaultMembers' '{' defaultMembers+=Member ( "," defaultMembers+=Member)* '}' )?
	'}';

SingleAnnotationParameter returns annotations::SingleAnnotationParameter:
	'SingleAnnotationParameter'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'value' value=AnnotationValue
	'}';

AnnotationParameterList returns annotations::AnnotationParameterList:
	{annotations::AnnotationParameterList}
	'AnnotationParameterList'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('settings' '{' settings+=AnnotationAttributeSetting ( "," settings+=AnnotationAttributeSetting)* '}' )?
	'}';

AnnotationAttributeSetting returns annotations::AnnotationAttributeSetting:
	'AnnotationAttributeSetting'
	'{'
		'attribute' attribute=[members::InterfaceMethod|EString]
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'value' value=AnnotationValue
	'}';

UsesModuleDirective returns modules::UsesModuleDirective:
	'UsesModuleDirective'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
	'}';

ProvidesModuleDirective returns modules::ProvidesModuleDirective:
	'ProvidesModuleDirective'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'typeReference' typeReference=TypeReference
		'serviceProviders' '{' serviceProviders+=TypeReference ( "," serviceProviders+=TypeReference)* '}' 
	'}';

RequiresModuleDirective returns modules::RequiresModuleDirective:
	'RequiresModuleDirective'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('modifiers' '{' modifiers+=Modifier ( "," modifiers+=Modifier)* '}' )?
		'requiredModule' requiredModule=ModuleReference
	'}';

OpensModuleDirective returns modules::OpensModuleDirective:
	'OpensModuleDirective'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'accessGrantedPackage' accessGrantedPackage=IdentifierReference
		('modules' '{' modules+=ModuleReference ( "," modules+=ModuleReference)* '}' )?
	'}';

ExportsModuleDirective returns modules::ExportsModuleDirective:
	'ExportsModuleDirective'
	'{'
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		'accessGrantedPackage' accessGrantedPackage=IdentifierReference
		('modules' '{' modules+=ModuleReference ( "," modules+=ModuleReference)* '}' )?
	'}';

ModuleReference returns modules::ModuleReference:
	{modules::ModuleReference}
	'ModuleReference'
	'{'
		('namespaces' '{' namespaces+=EString ( "," namespaces+=EString)* '}' )?
		('layoutInformations' '{' layoutInformations+=LayoutInformation ( "," layoutInformations+=LayoutInformation)* '}' )?
		('target' target=Module)?
	'}';
